@startuml

package utils <<folder>> {
	interface Observable {
		+ attach(Observateur)
		+ detach(Observateur)
		+ notify()
	}

	interface Observator {
		+ notified()
	}
}


package model.class <<folder>> {

	package model.class.typedElement <<folder>> {

		class Attribute {
		}
	}
	package model.class.class <<folder>> {

		 class A_class {
		}
	}

	package model.class.relation <<folder>> {

	}

	package model.class.relation <<folder>> {
		class Relation {
		}
	}

	Relation --|> Observable
	Attribute --|> Observable
	A_class --|> Observable

	Relation "1" --> "*" Observator
	Attribute "1" --> "*" Observator
	A_class "1" --> "*" Observator
}



package model.object.objectDiagram <<folder>> {

	 class Object {
	  - name : String
	 }

	 abstract class RelationO{
		- title : String
	}

	package model.object.value <<folder>> {

		 abstract class Value {
		   + toString() : String
		 }

		 class IntValue {
		  - value : int
		 }
		 class FloatValue {
		   - value : float
		 }
		 class DoubleValue {
		   - value : double
		 }
		 class StringValue {
		   - value : String
		 }
		 class BooleanValue {
		   - value : boolean
		 }

	}

	RelationO  --> "1" Relation
	A_class "1" <-- Object
	Object --> "*" RelationO
	Object --* "*" Value

	Value --> "1" Attribute

	IntValue --|> Value
	FloatValue --|> Value
	DoubleValue --|> Value
	StringValue --|> Value
	BooleanValue --|> Value

	Value --|> Observator
	RelationO --|> Observator
	Object --|> Observator
}






@enduml