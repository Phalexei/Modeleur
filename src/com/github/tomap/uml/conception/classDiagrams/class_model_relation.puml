@startuml

title Class diagram which models relations

package model.class <<folder>> {

	package model.class.class <<folder>> {

		 class A_class {
		}
		 class Type {
		}
	}
	package model.class.interface <<folder>> {
		class An_Interface {
		}
	}

	An_Interface --|> Type
	A_class --|> Type

	package model.class.exception <<folder>> {
		class BadTypeException {
			'+ BadTypeException (String msg)
		}
	}

	package model.class.relation <<folder>> {


		abstract class Relation{
			- name : String

			'+ Relation(String name)
			+ String display()
		}

		abstract class BinaryRelation{

			'+ BinaryRelation(String name, Multiplicity from, Multiplicity to)
			+ void updateMultiplicities(Multiplicity from, Multiplicity to)
		}

		class N_Relation{
			'+ N_Relation(String name)
			'+ N_Relation()
			+ void addMultiplicity(Multiplicity m)
			+ void removeMultiplicity(Multiplicity m)
			+ String display()
		}

		note top of Generalization : forbidden : \n class extends interface\n interface extends class\nlaunch BadTypeException()
		class Generalization {
			'+ Generalization(Type type1, Type type2)
			'+ Generalization()
			+ String display()
		}

		class Agregation {
			'+ Agregation()
			'+ Agregation(String name)
			+ String display()
		}

		class Composition {
			'+ Composition(String name)
			'+ Composition()
			+ String display()
		}

		class SimpleRelation {
			'+ SimpleRelation(String name)
			'+ SimpleRelation()
			+ String display()
		}

		class Implementation {
			'+ Implementation(A_Class aClass, An_Interface anInterface)
			'+ Implementation()
			+ String display()

		}

		class Association {
			'+ Association()
			'+ Association(A_Class associativeClass, Relation relation)
			+ String display()
		}

	}
		Association --|> Relation
		Association" " --* "1" Relation
		Association " " --> "1" A_class

		N_Relation --|> Relation
		N_Relation " " --> "1 from" A_class


		BinaryRelation --|> Relation

		BinaryRelation " " --> "1 from" A_class
		BinaryRelation " " --> "1 to" A_class

		Generalization " " -->"from 1" Type
		Generalization " " -->"                 1 to" Type

		Generalization --|> Relation
		SimpleRelation --|> BinaryRelation
		Agregation --|> BinaryRelation
		Composition --|> BinaryRelation

		Implementation --|> Relation
		Implementation " " --> "1" An_Interface
		Implementation " " --> "1" A_class




		package model.class.multiplicity <<folder>> {
			Abstract class Multiplicity{
				'+ Multiplicity(A_Class aClass, Relation relation)
				+ String display()
			}

			class SingleMultiplicity{
				# value : int
				# attributeName : String

				'+ SingleMultiplicity(int value2, String attributeName,A_Class aClass, Relation relation)
				+ String display()
			}

			class DoubleMultiplicity{
				- maxValue : int

				'+ DoubleMultiplicity(int value,int maxvalue, String attributeName, A_Class aClass, Relation relation)
				+ String display()
			}

			class NoMultiplicity{
				'+ NoMultiplicity(A_Class aClass, Relation relation)
				+ String display()
			}
		}

		SingleMultiplicity --|> Multiplicity
		DoubleMultiplicity --|> SingleMultiplicity
		NoMultiplicity --|> Multiplicity
		(N_Relation, A_class) .. Multiplicity
		(BinaryRelation, A_class) .. Multiplicity
		(BinaryRelation, A_class) .. Multiplicity
}



@enduml