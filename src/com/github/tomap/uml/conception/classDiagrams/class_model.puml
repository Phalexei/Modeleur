@startuml

title Class diagram which models a class and interface



package model.class <<folder>> {

	package model.class.package <<folder>> {
		class A_Package {
		 - name : String

		 + A_Package(String name)
		 + void addClass(A_Class aClass)
		 + void removeClass(A_Class aClass)
		 + void addInterface(An_Interface anInterface)
		 + void removeInterface(An_Interface anInterface)
		 + String display()
		}
	}

	package model.class.class <<folder>> {

		 class A_class {
		  - isFinal : boolean
		  - isStatic : boolean
		  - isAbstract : boolean

		  + A_Class(String name, boolean isFinal, boolean isStatic, boolean isAbstract, A_Package apackage)
		  + A_Class()
		  + void addMethod(Method m)
		  + void removeMethod(Method m)
		  + void addAttribute(Attribute a)
		  + void removeAttribute(Attribute a)
		}
	}

	package model.class.interface <<folder>> {
		class An_Interface {

		+ An_Interface(String name, A_Package a_Package)
		+ void addMethod(Method m)
		+ void removeMethod(Method m)
		+ String display()
		}
	}


	package model.class.typedElement <<folder>> {

		class Attribute {
			- isDerivated : boolean

			+ Attribute(String name, boolean isFinal, Type type, boolean isStatic, boolean isDerivated,  Type belongtoType, Visibility visibility)
			+ Attribute(String name, boolean isFinal, Type type, boolean isStatic, boolean isDerivated, Visibility visibility)
			+ String display()
		}

		class Method {
			- isAbstract : boolean

			+ Method(Visibility v, Type typeReturn, String name,boolean isFinal, boolean isAbstract, Type belongtoType)
			+ Method(Visibility v, Type typeReturn, String name,boolean isFinal, boolean isAbstract)
			+ Method(String name)
			+ void addParameter (Parameter p)
			+ void removeParameter (Parameter p)
			+ String display()
		}

		class Parameter {
			+ Parameter(String name, boolean isFinal, Type type, Method method)
			+ String display()
		}

		abstract class TypedElement{
			# name : String
			# isFinal : boolean

			+ TypedElement(String name, boolean isFinal, Type type)
		}

		abstract class VisibleTypedElement {
			# isStatic : boolean

			+ VisibleTypedElement(String name, boolean isFinal, Type type, boolean isStatic, Visibility visibility)
		}
	}



	package model.class.type <<folder>> {
		abstract class Type{
			# name : String

			+ Type (String name)
			+ String display()
		}

		abstract class TypeBase{
		 	- byteSize : int
		 	+ TypeBase(String name, int byteSize)
		}

		class Integer {
			+ Integer()
		}

		class Double {
			+ Double()
		}

		class Float {
			+ IntFloateger()
		}

		class Void {
			+ Void()
		}

		class Boolean {
			+ Boolean()
		}

		class AString {
			+ AString()
		}
	}

	Boolean --|> TypeBase
	Float --|> TypeBase
	Double --|> TypeBase
	Integer --|> TypeBase
	Void --|> TypeBase
	AString --|> TypeBase

	TypeBase --|> Type

	TypedElement  " " --* "1 type" Type
	Attribute  " " --* "1 typeB {redefine type}" TypeBase


	package model.class.visibility <<folder>> {

		abstract class Visibility{
			- name : String

			+ Visibility(String name)
		}

		class Private {
			+ Private()
		}

		class Public {
			+ Public()
		}

		class Protected {
			+ Protected()
		}

		class Package {
			+ Package()
		}
	}

	Private --|> Visibility
	Public --|> Visibility
	Protected --|> Visibility
	Package --|> Visibility

	VisibleTypedElement --|> TypedElement
	Parameter --|> TypedElement

	Method --|> VisibleTypedElement
	Attribute --|> VisibleTypedElement
	VisibleTypedElement " " --* "1" Visibility


	A_class --|> Type
	A_class "1..*" --* "1" A_Package
	An_Interface "1..*" --* "1" A_Package
	A_class "1" *-- "1..*" Attribute
	A_class "1" *-- "1..*" Method

	An_Interface "1..*" *-- "1" Method

	Method "1..*" *-- "1" Parameter

	An_Interface --|> Type

}






@enduml